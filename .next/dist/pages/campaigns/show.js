'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _ContributeForm = require('../../components/ContributeForm');

var _ContributeForm2 = _interopRequireDefault(_ContributeForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/vittori/Desktop/Projects/biots/ETH/EthereumCasts/VotingApp/pages/campaigns/show.js?entry';


var CampaignShow = function (_Component) {
    (0, _inherits3.default)(CampaignShow, _Component);

    function CampaignShow() {
        (0, _classCallCheck3.default)(this, CampaignShow);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignShow.__proto__ || (0, _getPrototypeOf2.default)(CampaignShow)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignShow, [{
        key: 'renderCards',
        value: function renderCards() {
            var _props = this.props,
                balance = _props.balance,
                manager = _props.manager,
                question = _props.question,
                description = _props.description,
                requestsCount = _props.requestsCount,
                approversCount = _props.approversCount;

            var items = [{
                header: manager,
                meta: 'Address of Manager',
                description: 'The manager created this campaign',
                style: { overflowWrap: 'break-word' }
            }, {
                header: description,
                meta: question,
                description: 'A request tries to withdraw money from the contract. Requests must be approved by approvers'
            }, {
                header: approversCount,
                meta: 'Number of Approvers',
                description: 'Number of people who can vote'
            }];

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 59
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 64
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 65
                }
            }, 'Campaign Show: ', this.props.question), _react2.default.createElement(_semanticUiReact.Grid, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 66
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 67
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 68
                }
            }, this.renderCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 70
                }
            }, _react2.default.createElement(_ContributeForm2.default, { address: this.props.address, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 71
                }
            }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 75
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 76
                }
            }, _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 77
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 78
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 79
                }
            }, 'View Requests')))))));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var campaign, summary;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                campaign = (0, _campaign2.default)(props.query.address);
                                _context.next = 3;
                                return campaign.methods.getSummary().call();

                            case 3:
                                summary = _context.sent;
                                return _context.abrupt('return', {
                                    address: props.query.address,
                                    description: summary[0],
                                    question: summary[1],
                                    balance: summary[2],
                                    requestsCount: summary[3],
                                    approversCount: summary[4],
                                    manager: summary[5]
                                });

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignShow;
}(_react.Component);

exports.default = CampaignShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25TaG93IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYXJkcyIsIl9wcm9wcyIsInByb3BzIiwiYmFsYW5jZSIsIm1hbmFnZXIiLCJxdWVzdGlvbiIsImRlc2NyaXB0aW9uIiwicmVxdWVzdHNDb3VudCIsImFwcHJvdmVyc0NvdW50IiwiaXRlbXMiLCJoZWFkZXIiLCJtZXRhIiwic3R5bGUiLCJvdmVyZmxvd1dyYXAiLCJjcmVhdGVFbGVtZW50IiwiR3JvdXAiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJlbmRlciIsIlJvdyIsIkNvbHVtbiIsIndpZHRoIiwiYWRkcmVzcyIsInJvdXRlIiwicHJpbWFyeSIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsImNhbXBhaWduIiwic3VtbWFyeSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJxdWVyeSIsIm1ldGhvZHMiLCJnZXRTdW1tYXJ5IiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBUEEsSUFBSUEsZUFBZSxpR0FBbkI7OztBQVNBLElBQUlDLGVBQWUsVUFBVUMsVUFBVixFQUFzQjtBQUNyQyw0QkFBVUQsWUFBVixFQUF3QkMsVUFBeEI7O0FBRUEsYUFBU0QsWUFBVCxHQUF3QjtBQUNwQixzQ0FBZ0IsSUFBaEIsRUFBc0JBLFlBQXRCOztBQUVBLGVBQU8seUNBQTJCLElBQTNCLEVBQWlDLENBQUNBLGFBQWFFLFNBQWIs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