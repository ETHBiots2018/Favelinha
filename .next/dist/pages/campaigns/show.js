'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _ContributeForm = require('../../components/ContributeForm');

var _ContributeForm2 = _interopRequireDefault(_ContributeForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/vittori/Desktop/Projects/biots/ETH/EthereumCasts/VotingApp/pages/campaigns/show.js?entry';


var CampaignShow = function (_Component) {
    (0, _inherits3.default)(CampaignShow, _Component);

    function CampaignShow() {
        (0, _classCallCheck3.default)(this, CampaignShow);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignShow.__proto__ || (0, _getPrototypeOf2.default)(CampaignShow)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignShow, [{
        key: 'renderCards',
        value: function renderCards() {
            var _props = this.props,
                balance = _props.balance,
                manager = _props.manager,
                question = _props.question,
                description = _props.description,
                requestsCount = _props.requestsCount,
                approversCount = _props.approversCount;

            var items = [{
                color: 'red',
                header: manager,
                meta: 'Address of Manager',
                description: 'The manager created this campaign',
                style: { overflowWrap: 'break-word' }
            }, {
                color: 'red',

                header: description,
                meta: question,
                description: 'The motive of the poll'
            }, {
                color: 'red',

                header: approversCount,
                meta: 'Number of Approvers',
                description: 'Number of people who can vote'
            }];

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 64
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 69
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 70
                }
            }, 'Poll: ', this.props.question), _react2.default.createElement(_semanticUiReact.Grid, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 71
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 72
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 73
                }
            }, this.renderCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 75
                }
            }, _react2.default.createElement(_ContributeForm2.default, { address: this.props.address, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 76
                }
            }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 80
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 81
                }
            }, _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 82
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 83
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 84
                }
            }, 'View and Create Choices')))))));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var campaign, summary;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                campaign = (0, _campaign2.default)(props.query.address);
                                _context.next = 3;
                                return campaign.methods.getSummary().call();

                            case 3:
                                summary = _context.sent;
                                return _context.abrupt('return', {
                                    address: props.query.address,
                                    description: summary[0],
                                    question: summary[1],
                                    balance: summary[2],
                                    requestsCount: summary[3],
                                    approversCount: summary[4],
                                    manager: summary[5]
                                });

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignShow;
}(_react.Component);

exports.default = CampaignShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25TaG93IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYXJkcyIsIl9wcm9wcyIsInByb3BzIiwiYmFsYW5jZSIsIm1hbmFnZXIiLCJxdWVzdGlvbiIsImRlc2NyaXB0aW9uIiwicmVxdWVzdHNDb3VudCIsImFwcHJvdmVyc0NvdW50IiwiaXRlbXMiLCJjb2xvciIsImhlYWRlciIsIm1ldGEiLCJzdHlsZSIsIm92ZXJmbG93V3JhcCIsImNyZWF0ZUVsZW1lbnQiLCJHcm91cCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJhZGRyZXNzIiwicm91dGUiLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJzdW1tYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFN1bW1hcnkiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLGlHQUFuQjs7O0FBU0EsSUFBSUMsZUFBZSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3JDLDRCQUFVRCxZQUFWLEVBQXdCQyxVQUF4Qjs7QUFFQSxhQUFTRCxZQUFULEdBQXdCO0FBQ3BCLHNDQUFnQixJQUFoQixFQUFzQkEsWUFBdEI7O0FBRUEsZUFBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsYUFB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