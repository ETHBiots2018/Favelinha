'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _ContributeForm = require('../components/ContributeForm');

var _ContributeForm2 = _interopRequireDefault(_ContributeForm);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/vittori/Desktop/Projects/biots/ETH/EthereumCasts/VotingApp/pages/vote.js?entry';


var VoteShow = function (_Component) {
    (0, _inherits3.default)(VoteShow, _Component);

    function VoteShow() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, VoteShow);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = VoteShow.__proto__ || (0, _getPrototypeOf2.default)(VoteShow)).call.apply(_ref, [this].concat(args))), _this), _this.onApprove = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(id) {
                var campaign, accounts;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                campaign = (0, _campaign2.default)(_this.props.address);
                                _context.next = 3;
                                return _web2.default.eth.getAccounts();

                            case 3:
                                accounts = _context.sent;
                                _context.next = 6;
                                return campaign.methods.approveRequest(id).send({
                                    from: accounts[0]
                                });

                            case 6:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(VoteShow, [{
        key: 'renderCards',
        value: function renderCards() {
            var _this3 = this;

            var items = this.props.requests.map(function (request, index) {
                return {
                    color: 'blue',
                    header: request.description,
                    description: request.name,
                    extra: _react2.default.createElement(_semanticUiReact.Button, {
                        icon: 'hand rock',
                        positive: true,
                        color: 'green',
                        onClick: function onClick() {
                            return _this3.onApprove(index);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 55
                        }
                    }, 'Approve')
                };
            });

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 67
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 72
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 73
                }
            }, 'Campaign Show: ', this.props.question), _react2.default.createElement(_semanticUiReact.Grid, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 74
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 75
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 76
                }
            }, this.renderCards()))));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(props) {
                var address, campaign, requestCount, summary, requests;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                address = props.query.address;
                                campaign = (0, _campaign2.default)(address);
                                _context2.next = 4;
                                return campaign.methods.getRequestsCount().call();

                            case 4:
                                requestCount = _context2.sent;
                                _context2.next = 7;
                                return campaign.methods.getSummary().call();

                            case 7:
                                summary = _context2.sent;
                                _context2.next = 10;
                                return _promise2.default.all(Array(parseInt(requestCount)).fill().map(function (element, index) {
                                    return campaign.methods.requests(index).call();
                                }));

                            case 10:
                                requests = _context2.sent;
                                return _context2.abrupt('return', { requests: requests,
                                    address: address,
                                    description: summary[0],
                                    question: summary[1],
                                    balance: summary[2],
                                    requestsCount: summary[3],
                                    approversCount: summary[4],
                                    manager: summary[5] });

                            case 12:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function getInitialProps(_x2) {
                return _ref3.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return VoteShow;
}(_react.Component);

exports.default = VoteShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiVm90ZVNob3ciLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJvbkFwcHJvdmUiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiaWQiLCJjYW1wYWlnbiIsImFjY291bnRzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInByb3BzIiwiYWRkcmVzcyIsImV0aCIsImdldEFjY291bnRzIiwic2VudCIsIm1ldGhvZHMiLCJhcHByb3ZlUmVxdWVzdCIsInNlbmQiLCJmcm9tIiwic3RvcCIsIl94Iiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYXJkcyIsIl90aGlzMyIsIml0ZW1zIiwicmVxdWVzdHMiLCJtYXAiLCJyZXF1ZXN0IiwiaW5kZXgiLCJjb2xvciIsImhlYWRlciIsImRlc2NyaXB0aW9uIiwibmFtZSIsImV4dHJhIiwiY3JlYXRlRWxlbWVudCIsImljb24iLCJwb3NpdGl2ZSIsIm9uQ2xpY2siLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIkdyb3VwIiwicmVuZGVyIiwicXVlc3Rpb24iLCJSb3ciLCJDb2x1bW4iLCJ3aWR0aCIsIl9yZWYzIiwiX2NhbGxlZTIiLCJyZXF1ZXN0Q291bnQiLCJzdW1tYXJ5IiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwicXVlcnkiLCJnZXRSZXF1ZXN0c0NvdW50IiwiZ2V0U3VtbWFyeSIsImFsbCIsInBhcnNlSW50IiwiZmlsbCIsImVsZW1lbnQiLCJhYnJ1cHQiLCJiYWxhbmNlIiwicmVxdWVzdHNDb3VudCIsImFwcHJvdmVyc0NvdW50IiwibWFuYWdlciIsImdldEluaXRpYWxQcm9wcyIsIl94MiJdLCJt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