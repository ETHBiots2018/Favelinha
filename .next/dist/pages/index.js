'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/vittori/Desktop/Projects/biots/ETH/EthereumCasts/VotingApp/pages/index.js?entry';


var CampaignIndex = function (_Component) {
    (0, _inherits3.default)(CampaignIndex, _Component);

    function CampaignIndex() {
        (0, _classCallCheck3.default)(this, CampaignIndex);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignIndex, [{
        key: 'renderCampaigns',
        value: function renderCampaigns() {
            var items = this.props.results.map(function (_ref) {
                var description = _ref.description,
                    address = _ref.address,
                    question = _ref.question;

                return {
                    header: description + ": " + question,
                    description: _react2.default.createElement(_react2.default.Fragment, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 35
                        }
                    }, _react2.default.createElement(_routes.Link, { route: '/campaigns/' + address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 36
                        }
                    }, _react2.default.createElement('a', {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 38
                        }
                    }, 'View poll')), _react2.default.createElement(_routes.Link, { route: '/' + address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 40
                        }
                    }, _react2.default.createElement(_semanticUiReact.Button, {
                        floated: 'right',
                        content: 'Vote',
                        icon: 'hand pointer',
                        positive: true,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 41
                        }
                    }))),
                    fluid: true
                };
            });

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 54
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            console.log(this.props.results);
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                }
            }, _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 61
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 62
                }
            }, 'Open Polls'), _react2.default.createElement(_routes.Link, { route: '/campaigns/new', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 64
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 65
                }
            }, _react2.default.createElement(_semanticUiReact.Button, {
                floated: 'right',
                content: 'Create Poll',
                icon: 'hand spock',
                primary: true,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 66
                }
            }))), this.renderCampaigns()));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var _this2 = this;

                var campaigns, results;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return _factory2.default.methods.getDeployedCampaigns().call();

                            case 2:
                                campaigns = _context2.sent;
                                _context2.next = 5;
                                return _promise2.default.all(campaigns.map(function () {
                                    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(address) {
                                        var campaign, summary;
                                        return _regenerator2.default.wrap(function _callee$(_context) {
                                            while (1) {
                                                switch (_context.prev = _context.next) {
                                                    case 0:
                                                        campaign = (0, _campaign2.default)(address);
                                                        _context.next = 3;
                                                        return campaign.methods.getSummary().call();

                                                    case 3:
                                                        summary = _context.sent;
                                                        return _context.abrupt('return', {
                                                            address: address,
                                                            description: summary[0],
                                                            question: summary[1],
                                                            balance: summary[2],
                                                            requestsCount: summary[3],
                                                            approversCount: summary[4],
                                                            manager: summary[5]
                                                        });

                                                    case 5:
                                                    case 'end':
                                                        return _context.stop();
                                                }
                                            }
                                        }, _callee, _this2);
                                    }));

                                    return function (_x) {
                                        return _ref3.apply(this, arguments);
                                    };
                                }()));

                            case 5:
                                results = _context2.sent;
                                return _context2.abrupt('return', { results: results });

                            case 7:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function getInitialProps() {
                return _ref2.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyQ2FtcGFpZ25zIiwiaXRlbXMiLCJwcm9wcyIsInJlc3VsdHMiLCJtYXAiLCJfcmVmIiwiZGVzY3JpcHRpb24iLCJhZGRyZXNzIiwicXVlc3Rpb24iLCJoZWFkZXIiLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJvdXRlIiwiZmxvYXRlZCIsImNvbnRlbnQiLCJpY29uIiwicG9zaXRpdmUiLCJmbHVpZCIsIkdyb3VwIiwicmVuZGVyIiwiY29uc29sZSIsImxvZyIsInByaW1hcnkiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlMiIsIl90aGlzMiIsImNhbXBhaWducyIsIndyYXAiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXREZXBsb3llZENhbXBhaWducyIsImNhbGwiLCJzZW50IiwiYWxsIiwiX3JlZjMiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJzdW1tYXJ5IiwiX2NhbGxlZSQiLCJfY29udGV4dCIsImdldFN1bW1hcnkiLCJhYnJ1cHQiLCJiYWxhbmNlIiwicmVxdWVzdHNDb3VudCIsImFwcHJvdmVyc0NvdW50IiwibWFuYWdlciIsInN0b3AiLCJfeCIsImdldEluaXRpYWxQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7Ozs7QUFOQSxJQUFJQSxlQUFlLHdGQUFuQjs7O0FBUUEsSUFBSUMsZ0JBQWdCLFVBQVVDLFVBQVYsRUFBc0I7QUFDdEMs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